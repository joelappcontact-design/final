#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');

// Fonction pour ex√©cuter une commande
function runCommand(command, description) {
  console.log(`\nüîÑ ${description}...`);
  console.log(`   Commande: ${command}\n`);
  
  try {
    execSync(command, { stdio: 'inherit' });
    console.log(`‚úÖ ${description} termin√©\n`);
  } catch (error) {
    console.error(`‚ùå Erreur lors de ${description}:`, error.message);
    process.exit(1);
  }
}

// Fonction pour v√©rifier les pr√©requis
function checkPrerequisites() {
  console.log('üîç V√©rification des pr√©requis...\n');
  
  // V√©rifier Node.js
  try {
    const nodeVersion = execSync('node --version', { encoding: 'utf8' });
    console.log(`‚úÖ Node.js: ${nodeVersion.trim()}`);
  } catch (error) {
    console.error('‚ùå Node.js non install√©');
    process.exit(1);
  }
  
  // V√©rifier npm
  try {
    const npmVersion = execSync('npm --version', { encoding: 'utf8' });
    console.log(`‚úÖ npm: ${npmVersion.trim()}`);
  } catch (error) {
    console.error('‚ùå npm non install√©');
    process.exit(1);
  }
  
  // V√©rifier les fichiers essentiels
  const essentialFiles = [
    './package.json',
    './src/components/CityPage.tsx',
    './scripts/generate-all-cities.js',
    './scripts/ile-de-france-cities.json'
  ];
  
  essentialFiles.forEach(file => {
    if (fs.existsSync(file)) {
      console.log(`‚úÖ ${file}`);
    } else {
      console.error(`‚ùå ${file} - MANQUANT`);
      process.exit(1);
    }
  });
  
  console.log('\n‚úÖ Tous les pr√©requis sont satisfaits\n');
}

// Fonction pour ex√©cuter tout (sans √©craser les donn√©es)
function runAllSafe() {
  console.log('üöÄ Ex√©cution s√©curis√©e du processus de g√©n√©ration des pages de villes\n');
  
  // 1. V√©rifier les pr√©requis
  checkPrerequisites();
  
  // 2. V√©rifier le nombre de villes dans le fichier de donn√©es
  try {
    const data = fs.readFileSync('./scripts/ile-de-france-cities.json', 'utf8');
    const citiesData = JSON.parse(data);
    const totalCities = Object.values(citiesData.departments)
      .reduce((sum, dept) => sum + dept.cities.length, 0);
    console.log(`üìä Nombre de villes dans le fichier de donn√©es: ${totalCities}\n`);
  } catch (error) {
    console.error('‚ùå Erreur lors de la lecture du fichier de donn√©es:', error.message);
    process.exit(1);
  }
  
  // 3. G√©n√©rer toutes les pages (sans √©craser les donn√©es)
  runCommand('node scripts/generate-all-cities.js', 'G√©n√©ration de toutes les pages de villes');
  
  // 4. V√©rifier l'√©tat du projet
  runCommand('node scripts/deploy-cities.js check', 'V√©rification de l\'√©tat du projet');
  
  // 5. Mettre √† jour le fichier de suivi
  runCommand('node scripts/deploy-cities.js update', 'Mise √† jour du fichier de suivi');
  
  console.log('üéâ Processus complet termin√© !');
  console.log('\nüìã R√©sum√©:');
  console.log('   - Pages statiques cr√©√©es pour les villes prioritaires');
  console.log('   - Pages dynamiques cr√©√©es pour les autres villes');
  console.log('   - Fichier de suivi mis √† jour');
  console.log('\nüîó URLs disponibles:');
  console.log('   - Pages statiques: /serrurier-[ville]');
  console.log('   - Pages dynamiques: /ville/[slug]');
  console.log('\nüìÑ Fichiers g√©n√©r√©s:');
  console.log('   - CITIES_GENERATION_REPORT.json');
  console.log('   - CITIES_TRACKING.md');
}

// Fonction principale
function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0 || args[0] === 'all') {
    runAllSafe();
  } else {
    const command = args[0];
    
    switch (command) {
      case 'generate':
        runCommand('node scripts/generate-all-cities.js', 'G√©n√©ration de toutes les pages de villes');
        break;
      case 'check':
        runCommand('node scripts/deploy-cities.js check', 'V√©rification de l\'√©tat du projet');
        break;
      case 'test':
        runCommand('node scripts/deploy-cities.js test', 'Test des pages');
        break;
      case 'deploy':
        runCommand('node scripts/deploy-cities.js deploy', 'D√©ploiement sur Vercel');
        break;
      default:
        console.log('Usage: node scripts/run-all-safe.js [command]');
        console.log('Commands:');
        console.log('  all      - Ex√©cuter tout le processus (par d√©faut)');
        console.log('  generate - G√©n√©rer les pages');
        console.log('  check    - V√©rifier l\'√©tat');
        console.log('  test     - Tester les pages');
        console.log('  deploy   - D√©ployer sur Vercel');
        process.exit(1);
    }
  }
}

// Ex√©cuter le script
if (require.main === module) {
  main();
}

module.exports = { main, runAllSafe, checkPrerequisites };
