#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');

// Fonction pour ex√©cuter une commande
function runCommand(command, description) {
  console.log(`\nüîÑ ${description}...`);
  console.log(`   Commande: ${command}\n`);
  
  try {
    execSync(command, { stdio: 'inherit' });
    console.log(`‚úÖ ${description} termin√©\n`);
  } catch (error) {
    console.error(`‚ùå Erreur lors de ${description}:`, error.message);
    process.exit(1);
  }
}

// Fonction pour v√©rifier les pr√©requis
function checkPrerequisites() {
  console.log('üîç V√©rification des pr√©requis...\n');
  
  // V√©rifier Node.js
  try {
    const nodeVersion = execSync('node --version', { encoding: 'utf8' });
    console.log(`‚úÖ Node.js: ${nodeVersion.trim()}`);
  } catch (error) {
    console.error('‚ùå Node.js non install√©');
    process.exit(1);
  }
  
  // V√©rifier npm
  try {
    const npmVersion = execSync('npm --version', { encoding: 'utf8' });
    console.log(`‚úÖ npm: ${npmVersion.trim()}`);
  } catch (error) {
    console.error('‚ùå npm non install√©');
    process.exit(1);
  }
  
  // V√©rifier les fichiers essentiels
  const essentialFiles = [
    './package.json',
    './src/components/CityPage.tsx',
    './scripts/generate-complete-data.js',
    './scripts/generate-all-cities.js'
  ];
  
  essentialFiles.forEach(file => {
    if (fs.existsSync(file)) {
      console.log(`‚úÖ ${file}`);
    } else {
      console.error(`‚ùå ${file} - MANQUANT`);
      process.exit(1);
    }
  });
  
  console.log('\n‚úÖ Tous les pr√©requis sont satisfaits\n');
}

// Fonction pour afficher le menu
function showMenu() {
  console.log('üöÄ Script d\'automatisation des pages de villes - √éle-de-France\n');
  console.log('Choisissez une option:');
  console.log('1. G√©n√©rer les donn√©es compl√®tes des villes');
  console.log('2. G√©n√©rer toutes les pages de villes');
  console.log('3. V√©rifier l\'√©tat du projet');
  console.log('4. Tester les pages');
  console.log('5. D√©ployer sur Vercel');
  console.log('6. Tout ex√©cuter (recommand√©)');
  console.log('7. Quitter\n');
}

// Fonction pour ex√©cuter tout
function runAll() {
  console.log('üöÄ Ex√©cution compl√®te du processus de g√©n√©ration des pages de villes\n');
  
  // 1. V√©rifier les pr√©requis
  checkPrerequisites();
  
  // 2. G√©n√©rer les donn√©es compl√®tes
  runCommand('node scripts/generate-complete-data.js', 'G√©n√©ration des donn√©es compl√®tes des villes');
  
  // 3. G√©n√©rer toutes les pages
  runCommand('node scripts/generate-all-cities.js', 'G√©n√©ration de toutes les pages de villes');
  
  // 4. V√©rifier l'√©tat du projet
  runCommand('node scripts/deploy-cities.js check', 'V√©rification de l\'√©tat du projet');
  
  // 5. Mettre √† jour le fichier de suivi
  runCommand('node scripts/deploy-cities.js update', 'Mise √† jour du fichier de suivi');
  
  console.log('üéâ Processus complet termin√© !');
  console.log('\nüìã R√©sum√©:');
  console.log('   - Donn√©es des villes g√©n√©r√©es');
  console.log('   - Pages statiques cr√©√©es pour les villes prioritaires');
  console.log('   - Pages dynamiques cr√©√©es pour les autres villes');
  console.log('   - Fichier de suivi mis √† jour');
  console.log('\nüîó URLs disponibles:');
  console.log('   - Pages statiques: /serrurier-[ville]');
  console.log('   - Pages dynamiques: /ville/[slug]');
  console.log('\nüìÑ Fichiers g√©n√©r√©s:');
  console.log('   - CITIES_DATA_REPORT.json');
  console.log('   - CITIES_GENERATION_REPORT.json');
  console.log('   - CITIES_TRACKING.md');
}

// Fonction principale
function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    // Mode interactif
    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    showMenu();
    
    rl.question('Votre choix (1-7): ', (answer) => {
      switch (answer.trim()) {
        case '1':
          runCommand('node scripts/generate-complete-data.js', 'G√©n√©ration des donn√©es compl√®tes des villes');
          break;
        case '2':
          runCommand('node scripts/generate-all-cities.js', 'G√©n√©ration de toutes les pages de villes');
          break;
        case '3':
          runCommand('node scripts/deploy-cities.js check', 'V√©rification de l\'√©tat du projet');
          break;
        case '4':
          runCommand('node scripts/deploy-cities.js test', 'Test des pages');
          break;
        case '5':
          runCommand('node scripts/deploy-cities.js deploy', 'D√©ploiement sur Vercel');
          break;
        case '6':
          runAll();
          break;
        case '7':
          console.log('üëã Au revoir !');
          process.exit(0);
          break;
        default:
          console.log('‚ùå Choix invalide');
          process.exit(1);
      }
      
      rl.close();
    });
  } else {
    // Mode ligne de commande
    const command = args[0];
    
    switch (command) {
      case 'all':
        runAll();
        break;
      case 'data':
        runCommand('node scripts/generate-complete-data.js', 'G√©n√©ration des donn√©es compl√®tes des villes');
        break;
      case 'generate':
        runCommand('node scripts/generate-all-cities.js', 'G√©n√©ration de toutes les pages de villes');
        break;
      case 'check':
        runCommand('node scripts/deploy-cities.js check', 'V√©rification de l\'√©tat du projet');
        break;
      case 'test':
        runCommand('node scripts/deploy-cities.js test', 'Test des pages');
        break;
      case 'deploy':
        runCommand('node scripts/deploy-cities.js deploy', 'D√©ploiement sur Vercel');
        break;
      default:
        console.log('Usage: node scripts/run-all.js [command]');
        console.log('Commands:');
        console.log('  all      - Ex√©cuter tout le processus');
        console.log('  data     - G√©n√©rer les donn√©es des villes');
        console.log('  generate - G√©n√©rer les pages');
        console.log('  check    - V√©rifier l\'√©tat');
        console.log('  test     - Tester les pages');
        console.log('  deploy   - D√©ployer sur Vercel');
        console.log('  (aucun)  - Mode interactif');
        process.exit(1);
    }
  }
}

// Ex√©cuter le script
if (require.main === module) {
  main();
}

module.exports = { main, runAll, checkPrerequisites };
